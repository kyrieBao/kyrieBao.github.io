<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>uni-app 入门实战</title>
    <link href="/2021/09/27/uni-app-%E5%85%A5%E9%97%A8/"/>
    <url>/2021/09/27/uni-app-%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="uni-app-入门实战"><a href="#uni-app-入门实战" class="headerlink" title="uni-app 入门实战"></a>uni-app 入门实战</h1><blockquote><p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：Kyrie</p></blockquote><p><a href="https://uniapp.dcloud.io/README">uniapp</a>是Dcloud公司的产品，是一个跨端开发框架，基于vue.js技术栈。开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。这是它的功能架构图，可以看下，了解下它的架构。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261530975.png"></p><p>简单总结下，uniapp底层集成了native技术，就是h5+引擎，能调用手机原生api，所以uniapp能开发接近原生性能的app，这是js引擎部分；它是双引擎，渲染又是独立一个独立引擎。这个渲染引擎又分为nvue渲染和webview渲染，nvue其实就是集成的weex，webview这个有了解的应该知道它的内核是webkit，可以看这篇<a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s/vxbVz_gHJd_rxK0bgUWBfg">文章</a>了解。</p><h2 id="生态环境"><a href="#生态环境" class="headerlink" title="生态环境"></a>生态环境</h2><p>uniapp官方的qq群目前已经有35个了，都是2000人的大群。还有各种基于uniapp的开源组件库，比如uViewUI、colorui、ThorUI、uCharts，最完整最出名的目前是uViewUI，官方文档也是比较完备了，<a href="https://mp.weixin.qq.com/s/vxbVz_gHJd_rxK0bgUWBfg">uviewui.com/。</a> 他们的官方qq群现在有4个，可以加群找开发者解答疑问。uniapp官方说有600万开发者，整体上看，生态还算不错。</p><h3 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h3><ol><li><h4 id="阅读官方文档"><a href="#阅读官方文档" class="headerlink" title="阅读官方文档"></a>阅读官方文档</h4><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261546986.png"><a href="https://link.juejin.cn/?target=https://uniapp.dcloud.io/README">官方文档</a>从入门介绍到学习方法再到用法说明、注意事项等等，一应俱全。如果文档看不下去，可以看看社区帖子，或者从插件市场找些现成的用起来。</p></li><li><h4 id="活用插件市场"><a href="#活用插件市场" class="headerlink" title="活用插件市场"></a>活用插件市场</h4><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271624276.png"></p><p>插件上包含了各种组件、SDK、项目模板等各种资源，甚至还有uniCloud、HbuilderX的相关插件。如果官方的基础组件、官方的uni-ui扩展组件库不能满足你的需求，都可以到插件市场找找看。官方是很重视这个插件市场的，比如uni-ui有一篇官方文档介绍说明<a href="https://uniapp.dcloud.io/component/README?id=uniui%EF%BC%8C%E7%82%B9%E5%87%BB%E4%B8%8B%E9%9D%A2%E7%9A%84%E7%BB%84%E4%BB%B6%E5%B0%B1%E4%BC%9A%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%8F%92%E4%BB%B6%E5%B8%82%E5%9C%BA%EF%BC%8Cuniui%E5%85%A8%E9%83%A8%E6%95%A3%E8%90%BD%E5%9C%A8%E8%BF%99%E4%B8%AA%E6%8F%92%E4%BB%B6%E5%B8%82%E5%9C%BA%E9%87%8C%E3%80%82">uniapp.dcloud.io/component/R…</a></p><p>看这个插件市场排名，也能大概了解目前的插件市场现状，整体上还是比较活跃的：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261556139.png"></p><p>除了上面提到的比较综合的组件库，其实还有很多优秀的插件作者，他们是专注在特定领域，下面推荐几个：</p><ul><li>可能是uniapp生态最好的<a href="https://ext.dcloud.net.cn/plugin?id=578">路由插件</a></li><li>应该是最强大的<a href="https://ext.dcloud.net.cn/plugin?id=805">富文本插件</a>(已经被uviewui集成)</li><li>个人觉得目前最好的<a href="https://ext.dcloud.net.cn/plugin?id=491">table组件</a></li><li>挺不错的<a href="https://ext.dcloud.net.cn/plugin?id=112">日期时间选择器</a></li></ul></li><li><h4 id="通过社区、qq群、插件留言向开发者提问"><a href="#通过社区、qq群、插件留言向开发者提问" class="headerlink" title="通过社区、qq群、插件留言向开发者提问"></a>通过社区、qq群、插件留言向开发者提问</h4><p>如果你严格按照文档进行开发，仍然遇到了问题，这时可能需要向他人求助了。如果是uniapp官方问题，可以在<a href="https://ask.dcloud.net.cn/explore/">社区</a>查找相关资料，这里的案例相当多，基本能找到大部分问题；</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261601048.png"></p></li></ol><p>插件问题最好就是直接在插件市场对应插件下留言，如果你的问题描述清楚明确，都会有人回答，有的时候，在线就能等到回复。也可以加相应的qq群，里面的热心人还是不少的。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261602115.png"></p><h2 id="实战教程"><a href="#实战教程" class="headerlink" title="实战教程"></a>实战教程</h2><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><ol><li><h4 id="安装hbuilderX"><a href="#安装hbuilderX" class="headerlink" title="安装hbuilderX"></a>安装hbuilderX</h4><p>hbuilderx 也是dcloud公司出品的ide产品，用uniapp开发跨多端产品，实现一次开发，多端发布就必须用hbuilderx这个神器IDE。这里是官网下载地址<a href="https://www.dcloud.io/hbuilderx.html%EF%BC%8C%E6%89%BE%E5%88%B0app%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8%EF%BC%8C%E4%B8%8D%E7%94%A8%E5%AE%89%E8%A3%85%E3%80%82uniapp%E5%AF%B9%E5%AE%89%E5%8D%93%E5%92%8C%E8%8B%B9%E6%9E%9C%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E6%9C%89%E8%A6%81%E6%B1%82%EF%BC%9AAndroid%E6%9C%80%E4%BD%8E%E8%A6%814.4%E3%80%81IOS%E6%9C%80%E4%BD%8E%E8%A6%819%E3%80%82">www.dcloud.io/hbuilderx.h…</a></p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261611385.png"></p></li><li><h4 id="安装夜神模拟器"><a href="#安装夜神模拟器" class="headerlink" title="安装夜神模拟器"></a>安装夜神模拟器</h4><p>既然是开发app，就少不了连机调试，你可以连接手机，也可以安装一个模拟器，这里推荐夜神模拟器，下载地址：<a href="https://link.juejin.cn/?target=https://www.yeshen.com/%E3%80%82">www.yeshen.com/。</a></p></li><li><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>hbuilderx连接到模拟器，选择工具–设置，打开配置界面,选择运行配置，如图。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261638735.png"></p><p>adb路径选择模拟器安装包的adb.exe地址，模拟器端口，夜神模拟器默认是62001，填上就可以了。如果你不确定它的端口，可以在adb.exe的同级目录下找到文件，双击运行，可以看到这个结果，如图: </p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261642440.png"></p><p>这个就是夜神模拟器的监听端口。</p></li><li><h4 id="svn源码管理"><a href="#svn源码管理" class="headerlink" title="svn源码管理"></a>svn源码管理</h4><ol><li>选择工具–插件安装，可以打开一个插件管理面板，如图。安装插件，它这里分为核心插件和其他插件两类，核心插件能跟随ide一起升级，其他插件就要到插件市场找自己需要的了。像svn这种插件，默认是没有的，可以到安装新插件这里安装svn插件。 </li></ol><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261652559.png"></p></li><li><h4 id="插件市场插件安装"><a href="#插件市场插件安装" class="headerlink" title="插件市场插件安装"></a>插件市场插件安装</h4><p>插件市场的插件安装一般是这种方式：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261654993.png"></p><p>点击这个按钮就可以安装到本地。这也分几种，我了解的就是组件类、编译类。像组件类，点击安装后会直接安装到当前打开的uniapp项目中，而且是指定的文件夹components中；像编译类，这种其实类似于webpack的loader，这个是放在hbx的安装包里。</p><h3 id="二、uniapp-手把手实战"><a href="#二、uniapp-手把手实战" class="headerlink" title="二、uniapp 手把手实战"></a>二、uniapp 手把手实战</h3><ol><li><h4 id="新建uniapp空模板項目"><a href="#新建uniapp空模板項目" class="headerlink" title="新建uniapp空模板項目"></a>新建uniapp空模板項目</h4><h5 id="cli模式"><a href="#cli模式" class="headerlink" title="cli模式"></a>cli模式</h5><p>用hbx创建项目在官方教程上讲得比较细致了，我这里只介绍下用vue-cli创建项目过程。创建步骤在官网上也有，相比用hbx的可视化搭建，用cli搭起来慢了不少。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装vue/cli全局依赖<br>npm install -g @vue/cli<br><br><span class="hljs-regexp">//</span>创建项目模板<br>vue create -p dcloudio/uni-preset-vue my-project<br><br></code></pre></td></tr></table></figure><p>如果在执行脚本时有这样的错误提示：vue: 无法加载文件 C:….vue.ps1。说明你的脚本运行被禁止了，解决办法就是打开当前项目地址的资源管理器，点击文件，弹出对话框，如图点击所示位置</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261718489.png"></p><p>会有弹出框，在里面执行这个段代码：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">set-ExecutionPolicy</span> <span class="hljs-string">RemoteSigned</span> <br><br></code></pre></td></tr></table></figure><p>执行之后，按提示输入Y或者A就可以了，再按上面进行项目创建，就正常了：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261719662.png"></p><p>最后，它会提示你选择项目模板：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261720876.png"></p><p>一般建议选择hello uni-app的模板。如果一切顺利(理想情况下)，创建完成的项目，看起来是这样的，如下图</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261721885.png"></p><p>我们可以观察下它的package.json文件，可以看到有很多的打包、运行命令，uniapp确实帮我们做了很多事！</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261722755.png"></p><p>cd my-project进入到项目中，运行一下npm run dev:h5，试下效果。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261724806.png"></p><p>可以看到确实成功了，打开启动页，按f12将页面切换到手机模式，就能看到效果了。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261724122.png"></p><p>这种cli模式下无法连接到模拟器调试，要实时调试app版本，只能用hbx这个ide。cli模式除了能调试h5版本，还可以调试小程序，以微信小程序为例，这需要先准备好开发工具。</p><h5 id="hbuilderx模式"><a href="#hbuilderx模式" class="headerlink" title="hbuilderx模式"></a>hbuilderx模式</h5><p>考虑到app是我们最主要的产品输出，最好还是切换到hbuilderx编译器上，其实用习惯之后，感觉还是挺好用的。cli模式适合开发h5或者小程序。具体的步骤看<a href="https://link.juejin.cn/?target=https://uniapp.dcloud.io/quickstart?id=_1-%E9%80%9A%E8%BF%87-hbuilderx-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">官网</a>就可以了，比较简单，可视化操作，一步步走就没问题。其实前面用cli模式创建的项目，也可以用hbx开发，在hbx编译器上打开文件夹，选择cli项目的src文件夹，就是一个标准的hbuilderx创建项目了。</p><p>这时选择运行–运行到模拟器就可以了</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271635730.png"></p></li></ol></li></ol><p>​       </p><ol start="2"><li><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>我们来观察下这个项目结构，这是官方的一个介绍，我copy过来了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">┌─cloudfunctions        云函数目录（阿里云为aliyun，腾讯云为tcb，详见uniCloud）<br>│─components            符合vue组件规范的uni-app组件目录<br>│  └─comp-<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.vue</span>         可复用的a组件<br>├─hybrid                存放本地网页的目录，详见<br>├─platforms             存放各平台专用页面的目录，详见<br>├─pages                 业务页面文件存放的目录<br>│  ├─index<br>│  │  └─index<span class="hljs-selector-class">.vue</span>       index页面<br>│  └─list<br>│     └─list<span class="hljs-selector-class">.vue</span>        list页面<br>├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此<br>├─wxcomponents          存放小程序组件的目录，详见<br>├─<span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span>               Vue初始化入口文件<br>├─App<span class="hljs-selector-class">.vue</span>               应用配置，用来配置App全局样式以及监听 应用生命周期<br>├─manifest<span class="hljs-selector-class">.json</span>         配置应用名称、appid、logo、版本等打包信息，详见<br>└─pages<span class="hljs-selector-class">.json</span>            配置页面路由、导航条、选项卡等页面类信息，详见<br>    <br><br></code></pre></td></tr></table></figure><p>重点是pages、static、main.js、App.vue、manifest.json、pages.json这几个目录或者文件。</p></li><li><h4 id="必学内容"><a href="#必学内容" class="headerlink" title="必学内容"></a>必学内容</h4><p>我这里没必要把官方文档从头讲一遍，这里可以告诉你重点内容，你学习时重点关注，重点消化就可以了。</p><p>第一个就是框架介绍这里，你要把框架简介的内容通读并熟悉。</p><p>第二个就是上手开发了，这时框架这块要知道怎么用了，如何配置pages.json文件非常重要！具体的其实我也记不住，但是通过配置调试你就能知道是怎么回事了，这个熟悉就行了。</p></li><li><h4 id="uniapp路由页面配置-pages-json"><a href="#uniapp路由页面配置-pages-json" class="headerlink" title="uniapp路由页面配置(pages.json)"></a>uniapp路由页面配置(pages.json)</h4><p>打开pages.json文件，这是一个uniapp项目配置文件，是json格式。如果内容较多，可以右键–显示文档结构图，可以看到这个文件的基本结构<img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261739503.png" alt="3ec99f0c31e345d1a158e3e5138e663c_tplv-k3u1fbpfcp-watermark"></p><p>pages是项目中用到的所有的页面配置，第一项是登录app的启动页，一般放登录页或者首页，其他的可以参考<a href="https://link.juejin.cn/?target=https://uniapp.dcloud.io/collocation/pages?id=pages">官方文档</a>看看说明并手动设置下参数，看下效果就明白了。subPackages是分包加载配置，这个是为小程序准备的，小程序在发布上传代码时对总包大小(目前是16M)有要求，还要示对总包进行分包，每个小分包不能超过2M，这个就要求在这里进行配置分包加载。globalStyle这个是设置全局样式的，一般都会有一个统一风格的样式，可以在这里设置，包括导航栏、标题、窗口背景色这些。tabBar这个也非常重要，这是app的标配，相当于是一级导航栏，拿我们这个hello uniapp的项目举例来说，框住部分就是tabBar的内容。</p><p>tabBar各组内容最多只能有5项，最少要有2项，都在list项进行配置</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261743574.png"></p><p>看下list项具体内容</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261746477.png"></p></li><li><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>这里按照粒度从粗到细分为应用生命周期、页面生命周期及组件生命周期，具体的可以看下<a href="https://link.juejin.cn/?target=https://uniapp.dcloud.io/collocation/frame/lifecycle?id=%E5%BA%94%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">文档</a>。其中组件生命周期是跟vue组件的生命周期相同。具体用法要结合业务场景配合来使用用。</p></li><li><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><p><a href="https://uniapp.dcloud.io/use-weex?id=vue-%E5%92%8C-nvue-%E5%85%B1%E4%BA%AB%E7%9A%84%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE">状态管理</a>这块有几种方式，</p><ul><li><p>vuex</p><p>vuex用法与vue项目上是一样的。唯一要注意的就是import store from ‘./store/store.js’这句只能写在main.js里，在别处引用都会报错？！</p></li><li><p>uni.storage</p><p>这块看下对应api的具体用法，这个状态数据是持久化的，除非你调用它的清除接口，这个数据会一直缓存在本地。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261750823.png"></p></li><li><p>globalData</p><p>这个用的比较少，这是在app.vue页面定义全局变量，具体<a href="https://link.juejin.cn/?target=https://uniapp.dcloud.io/collocation/App?id=globaldata">用法</a>如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;script&gt;  <br>    export default &#123;  <br>        globalData: &#123;  <br>            text: <span class="hljs-string">&#x27;text&#x27;</span>  <br>        &#125;<br>    &#125;  <br>&lt;/script&gt;<br><br><span class="hljs-comment">//在其他页面调用/修改全局变量</span><br><span class="hljs-function"><span class="hljs-title">getApp</span><span class="hljs-params">()</span></span><span class="hljs-selector-class">.globalData</span><span class="hljs-selector-class">.text</span> = <span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h4 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h4><p>uniapp的API文档非常详细，甚至封装了全局事件，我们可以直接用了<img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261753922.png" alt="5f6d5706917441e9b6e5eba5cc836007_tplv-k3u1fbpfcp-watermark"></p></li><li><h4 id="接口请求封装"><a href="#接口请求封装" class="headerlink" title="接口请求封装"></a>接口请求封装</h4><p>这一块内容在API模块的<a href="https://uniapp.dcloud.io/api/request/request?id=request">网络</a>栏，一般的接口请求就用uni.request(object)就可以了。普通的接口调用用这个就已经够了，如果需要用到请求拦截，需要到插件市场找合适的插件。这里推荐<a href="https://www.quanzhan.co/luch-request/">luch-request</a>,文档很清楚，功能比较全。</p></li><li><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><p>路由跳转对应的<a href="https://uniapp.dcloud.io/api/router?id=navigateto">API</a>可能看下官方文档，基本上都是常用的。这里有个前提就是，当前页面必须在pages.json中配置好，才能调用这些跳转的api。还有个要注意的就是tabbar页面只能用uni.switchTab来跳转。我们知道vue有vueRouter来支持路由跳转、路由守卫，但是uniapp不支持这个插件，如果要在uniapp上实现，这里推荐<a href="http://hhyang.cn/src/router/start/quickstart.html">uni-simple-router</a></p></li><li><h4 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h4><p>样式这一块要注意的地方比较多，我总结了一下特别要注意是这些地方：</p><ul><li> 尺寸单位</li></ul><p>  uniapp目前通用的尺寸单位是px、rpx，px即我们通常理解的像素单位；rpx是一个响应式单位，它会根据屏幕宽度按给定值占比来计算出像素值。</p><p>  前面提到的pages.json页面的<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">globalStyle</a>配置节点，可以通过配置来控制rpx的计算参数 </p><p>  <img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261804917.png"></p><ul><li><p>css变量及固定值</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261805834.png"></p><p>这几个参数主要是在跨端样式控制时要注意，经常会遇到app布局弄得差不多了，然后到h5端，样式就不对了，或者到小程序上也是异常。看上面这个表，主要就是要注意这三个变量在不同环境下，它的值是不同的，要特别注意。下面这个表，是对上面的一个补充，如果在h5端，不存在原生顶部导航栏与tabBar，就是自定义的div，我们在设置样式时就要参照这些变量的固定值。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109261807705.png"></p></li><li><p>字体图标</p><ul><li>通用的支持格式包括base64格式、网络路径即在线字体(须https开头)</li><li>小程序不支持在css中引用本地文件，包括图片或者字体</li><li>uniapp会自动把小于40kb的字体文件转换为base64，uniapp不会编译static文件夹下的内容</li></ul></li></ul><p>其他的像样式导入、内联样式等与web端应用开发差不多。还有一个要注意的就是如果要设置全局样式，可以在App.vue中设置或者用@import导入外联样式就可以了。</p></li><li><h4 id="组件和组件库"><a href="#组件和组件库" class="headerlink" title="组件和组件库"></a>组件和组件库</h4><p>组件这块是非常重要的，对uniapp来说包括框架设计、底层原理这些都是灵魂是骨架；前面讲到的各种规则及配置都是行为习惯、准则；还有前面提到的状态管理、路由、事件、样式、接口请求等，这些就像是血管、淋巴一样不可缺少；组件就是内脏、肌肉了，具体作用就看它的定位了。</p><p>官方文档这块将<a href="https://uniapp.dcloud.io/component/view">组件</a>专门列为一个栏目，可以大概看下有哪些组件。平时开发基本功能用官方提供的组件基本上就满足了。开源的组件库也是基于官方组件进行的二次封装，一般原则是优先参考官方组件，如果官方组件不支持的，或者用起来不方便的，再到开源市场寻找开源插件。</p></li><li><h4 id="登录跳转到首页"><a href="#登录跳转到首页" class="headerlink" title="登录跳转到首页"></a>登录跳转到首页</h4><p>接下来，我们开发一个登录跳转的功能。前面我们用vuecli创建了一个项目，那个是hellouni的，内容有点多，现在我们重新搭建一个空的项目模板，这样清楚一点。步骤跟前面一样，就是选择模板时选默认模板就行了。</p><h6 id="开发登录功能"><a href="#开发登录功能" class="headerlink" title="开发登录功能"></a>开发登录功能</h6><p>在空模板项目上尝试开发一个登录功能，一般需要这几步：</p><ul><li> 新建一个登录页面，配置pages页面路由参数</li></ul><p>  <img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271205515.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;pages&quot;</span>: [ <span class="hljs-regexp">//</span>pages数组中第一项表示应用启动页，参考：https:<span class="hljs-regexp">//u</span>niapp.dcloud.io<span class="hljs-regexp">/collocation/</span>pages<br>&#123;<br>            <span class="hljs-string">&quot;path&quot;</span> : <span class="hljs-string">&quot;pages/login/login&quot;</span>,<br>            <span class="hljs-string">&quot;style&quot;</span> :                                                                                    <br>            &#123;<br>                <span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-string">&quot;enablePullDownRefresh&quot;</span>: false<br>            &#125;<br>            <br>        &#125;,&#123;<br><span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;pages/index/index&quot;</span>,<br><span class="hljs-string">&quot;style&quot;</span>: &#123;<br><span class="hljs-string">&quot;navigationBarTitleText&quot;</span>: <span class="hljs-string">&quot;uni-app&quot;</span><br>&#125;<br>&#125;<br>    ]<br><br></code></pre></td></tr></table></figure><ul><li>准备一个可用的登录接口，进行封装</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">uni.request(&#123;<br><span class="hljs-regexp">//</span> <span class="hljs-comment">#ifdef H5</span><br>url: <span class="hljs-string">&#x27;/data-receive/v1/login&#x27;</span>,<br><span class="hljs-regexp">//</span> <span class="hljs-comment">#endif</span><br><span class="hljs-regexp">//</span> <span class="hljs-comment">#ifndef H5</span><br>url: <span class="hljs-string">&#x27;http://##.##.##.##:##/data-receive/v1/login&#x27;</span>,<br><span class="hljs-regexp">//</span> <span class="hljs-comment">#endif</span><br>method: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>data: &#123;<br>username: this.name,<br>password: this.password<br>&#125;,<br>dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>success(res) &#123;<br><span class="hljs-keyword">if</span> (res.statusCode == <span class="hljs-number">200</span> &amp;&amp; res.data.code == <span class="hljs-number">200</span>) &#123;<br><span class="hljs-regexp">//</span>跳转到首页<br>uni.navigateTo(&#123;<br>url: <span class="hljs-string">&#x27;../index/index&#x27;</span><br>&#125;)<br>&#125;<br>&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li><p>新建登录页面，完成布局、样式，登录逻辑</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">template</span>&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;content&quot;&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;logo&quot;&gt;<br>&lt;image src=&quot;../../static/logo.png&quot; mode=&quot;&quot;&gt;&lt;/image&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;list&quot;&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;title&quot;&gt;<br>用户名<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;input&quot;&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; placeholder=&quot;请输入用户名&quot; v-model=&quot;name&quot; /&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;list&quot;&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;title&quot;&gt;<br>密码<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;input&quot;&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;password&quot; /&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;button <span class="hljs-keyword">type</span>=&quot;default&quot; @tap=&quot;dologin&quot;&gt;登录&lt;/button&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">template</span>&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>将登录接口分为两种情况：h5环境、非h5环境</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-comment">#ifdef H5</span><br>url: <span class="hljs-string">&#x27;/data-receive/v1/login&#x27;</span>,<br><span class="hljs-regexp">//</span> <span class="hljs-comment">#endif</span><br><span class="hljs-regexp">//</span> <span class="hljs-comment">#ifndef H5</span><br>url: <span class="hljs-string">&#x27;http://##.##.##.##:##/data-receive/v1/login&#x27;</span>,<br><span class="hljs-regexp">//</span> <span class="hljs-comment">#endif</span><br><br></code></pre></td></tr></table></figure><ul><li><p>h5环境用代理解决跨域</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-string">&quot;h5&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;router&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;base&quot;</span> : &quot;./&quot;<br>        &#125;,<br>        <span class="hljs-string">&quot;devServer&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;proxy&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;/data-receive&quot;</span> : &#123;<br>                    <span class="hljs-string">&quot;target&quot;</span> : &quot;<span class="hljs-type">http</span>://##.##.##.##:##/data-receive<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                    &quot;</span>pathRewrite<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                        &quot;</span>^/data-receive<span class="hljs-string">&quot; : &quot;&quot;</span><br><span class="hljs-string">                    &#125;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br></code></pre></td></tr></table></figure></li><li><p>页面跳转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">uni<span class="hljs-selector-class">.navigateTo</span>(&#123;<br>url: <span class="hljs-string">&#x27;../index/index&#x27;</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><p>更多跳转请参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">路由与页面跳转</a></p></li></ul></li><li><h4 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h4><h6 id="app开发调试"><a href="#app开发调试" class="headerlink" title="app开发调试"></a>app开发调试</h6><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271423300.png"></h5><h5 id="h5开发调试"><a href="#h5开发调试" class="headerlink" title="h5开发调试"></a>h5开发调试</h5><p>h5其实就是网页，这个调试就比较简单了，跟开发web项目一样的</p><ul><li>在hbx上运行到浏览器(内置或者其他浏览器)</li><li>f12并开启手机调试模式</li></ul><h5 id="小程序开发调试"><a href="#小程序开发调试" class="headerlink" title="小程序开发调试"></a>小程序开发调试</h5><p>首先要明白uniapp小程序版本的开发方式：开发还是在hbx上开发，只不过要运行到小程序开发工具上，然后在hbx上开发会实时更新到小程序上。也就是说小程序开发工具只是个模拟器，看效果的，上面的代码都是从uniapp版本编译过来的，对开发不太友好，不建议在小程序开发工具上修改。以下是微信小程序开发步骤：</p><ul><li>到微信公众平台注册一个小程序，并填写相关信息</li><li>在开发设置完成小程序开发者绑定，生成小程序之后会有一个小程序appid，这个要保存</li><li>下载安装小程序开发工具</li></ul><p>如果项目是第一次运行到小程序，需要在小程序开发工具上绑定前面注册保存的appid，小程序代码地址(此例是在newproject\src\unpackage\dist\dev\mp-weixin)，绑定好了就能看到小程序的开发状态了，就像这样：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271512781.png"></p><p>前面讲过小程序的开发还是在hbx上，小程序工具是看效果的，但是调试找bug还是得在小程序开发工具上，调式模块就在右下角，类似于谷歌浏览器的调试窗，如果觉得窗口太小，这击这个浮动窗口按钮就能弹出调试窗口。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271513051.png"></p><p>已经弹出的调试窗口</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271517581.png"></p></li><li><h4 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h4><h5 id="app打包发布"><a href="#app打包发布" class="headerlink" title="app打包发布"></a>app打包发布</h5><p>app打包流程比较简单，分为安卓和苹果两大平台。一般app上线都应该走云打包流程，选择发行–&gt;原生App云打包，弹出这个对话框。</p><p>这个是安卓包，如果不需要上市场上的应用平台，就可以选择公共测试证书的打包方式。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271533954.png"></p><p>这是苹果版本的打包，苹果打包后要上线，只有上线appstore一条路，证书相关的三个文件都不能少。</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271534045.png"></p><p>点击打包之后，进入云打包队列排队等待，成功之后会给出下载地址：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271535912.png"></p></li></ol><p>​     安卓版本是可以直接安装使用的，你可以放在生产环境服务器上供用户下载。如果是苹果版本，打包后的ipa文件不能直接使用，还要提交到appstore审核通过，最后才能发布，这个周期大概在一周左右。</p><h5 id="app热更新"><a href="#app热更新" class="headerlink" title="app热更新"></a>app热更新</h5><p>在app上线之后，后面的版本升级就可以用热更新方式更新了，不用每次都发布一个新的完整包。选择发行–&gt;原生App-制作应用wgt包，弹出更新包对话框：</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271537765.png"></p><p>生成wgt后，将wgt文件放在服务器，用户在app上检测到有更新时就会下载更新包在本地热更新。</p><ul><li><p>发行wgt时，manifest.json配置页面的应用版本名称与应用版本号都必须高于上一次设置的值；</p><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109271540898.png"></p></li><li><p>检测版本是否更新，如果有更新就下载更新包、安装并重启应用，这里有个完整<a href="https://ask.dcloud.net.cn/article/35667">教程</a></p></li></ul><h5 id="h5打包发布"><a href="#h5打包发布" class="headerlink" title="h5打包发布"></a>h5打包发布</h5><p>h5版本的打包应该是最简单的，发布也可以按网页部署方式来，如果想用微信打开网页，最好将h5部署在外网域名所在的服务器上。</p><h5 id="小程序打包发布"><a href="#小程序打包发布" class="headerlink" title="小程序打包发布"></a>小程序打包发布</h5><ul><li><p>分包</p><p>小程序打包对包的大小有限制，之前是16M现在升级到了20M。具体的分包方法参考官方<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html">文档说明</a>，我们分包是要在uniapp上进行分包，注意<a href="https://uniapp.dcloud.io/collocation/manifest?id=%E5%85%B3%E4%BA%8E%E5%88%86%E5%8C%85%E4%BC%98%E5%8C%96%E7%9A%84%E8%AF%B4%E6%98%8E">uniapp分包要求</a>。我写了关于<a href="https://juejin.cn/post/6895310727544832013">uniapp适配微信小程序</a>的文章，对分包上传有说明，可以参考。</p></li><li><p>上传代码</p></li><li><p>提交审核</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo常用指令汇总</title>
    <link href="/2021/09/10/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/2021/09/10/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="Hexo-常用命令汇总"><a href="#Hexo-常用命令汇总" class="headerlink" title="Hexo 常用命令汇总"></a>Hexo 常用命令汇总</h3><blockquote><p>  本文记录Hexo常用命令与相应说明，相关文档也可以参考<a href="https://link.juejin.cn/?target=https://hexo.io/zh-cn/docs/commands">官方文档</a>。</p></blockquote><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ hexo <span class="hljs-keyword">init</span> [folder]<br></code></pre></td></tr></table></figure><blockquote><p> 新建网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站</p></blockquote><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>新建文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://link.juejin.cn/?target=https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p,--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r,--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s,--slug</code></td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> --path about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d,--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w,--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b,--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f,--force</code></td><td>强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c,--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br></code></pre></td></tr></table></figure><h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h4><p>建立文章草稿</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> draft &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，这让我们只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo S <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><p>发表草稿。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">$ hexo P <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><p>之后的 <code>hexo generate</code> 与 <code>hexo deploy</code> 的用法就完全一样了。</p><p>若日后想将正式文章转为为草稿，只需手动将文章从 <code>source/_posts</code> 目录移动到 <code>source/_drafts</code> 目录即可。</p><h4>显示草稿</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--draft</span><br><br></code></pre></td></tr></table></figure><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p,--port</code></td><td>重设端口</td></tr><tr><td><code>-s,--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l,--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure><p>本地调试时，如需要代码边修改边预览，可以使用该命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo s <span class="hljs-comment">--debug</span><br></code></pre></td></tr></table></figure><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g,--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ hexo render &lt;file1&gt; [file2] ...<br></code></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o,--output</code></td><td>设置输出路径</td></tr></tbody></table><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">$ hexo list &lt;<span class="hljs-keyword">type</span>&gt;<br></code></pre></td></tr></table></figure><p>列出网站资料。</p><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ hexo <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h4 id="常用组合命令"><a href="#常用组合命令" class="headerlink" title="常用组合命令"></a>常用组合命令</h4><blockquote><p>清除缓存，重新生产静态文件</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g</span><br></code></pre></td></tr></table></figure><blockquote><p>清除缓存、重新生成静态文件、同时部署</p></blockquote><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-meta">&amp;&amp; hexo g -d</span><br></code></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><hr><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--safe</span><br></code></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h4 id="调式模式"><a href="#调式模式" class="headerlink" title="调式模式"></a>调式模式</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--debug</span><br></code></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://link.juejin.cn/?target=https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ hexo <span class="hljs-comment">--silent</span><br></code></pre></td></tr></table></figure><p>隐藏终端信息。</p><h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 <span class="hljs-number">_</span><span class="hljs-keyword">config</span><span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span> 和 custom2<span class="hljs-variable">.json</span>，其中 custom2<span class="hljs-variable">.json</span> 优先级更高<br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br><br></code></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。 你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># 使用 custom<span class="hljs-variable">.yml</span> 代替默认的 <span class="hljs-number">_</span><span class="hljs-keyword">config</span><span class="hljs-variable">.yml</span><br>$ hexo server --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span><br><br># 使用 custom<span class="hljs-variable">.yml</span>, custom2<span class="hljs-variable">.json</span> 和 custom3<span class="hljs-variable">.yml</span>，其中 custom3<span class="hljs-variable">.yml</span> 优先级最高，其次是 custom2<span class="hljs-variable">.json</span><br>$ hexo <span class="hljs-keyword">generate</span> --<span class="hljs-keyword">config</span> custom<span class="hljs-variable">.yml</span>,custom2<span class="hljs-variable">.json</span>,custom3<span class="hljs-variable">.yml</span><br><br></code></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭配 Fluid 如何优雅的写一篇文章</title>
    <link href="/2021/09/04/%E6%90%AD%E9%85%8DFluid%20%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2021/09/04/%E6%90%AD%E9%85%8DFluid%20%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。</p><hr><h3 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h3><blockquote><p>对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为Markdown 追求简洁式写作，默认渲染器不支持复杂渲染</p></blockquote><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>站点</th><th align="center">地址</th><th align="right">介绍</th></tr></thead><tbody><tr><td><code>FluidDocs</code></td><td align="center"><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></td><td align="right">Fluid官方文档</td></tr><tr><td><code>Hexo-theme-fluid</code></td><td align="center"><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></td><td align="right">FluidGithub Repo</td></tr><tr><td><code>Fluid Blog</code></td><td align="center"><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></td><td align="right">Fluid官方博客</td></tr></tbody></table><h4 id="脚注-仅默认渲染器可用"><a href="#脚注-仅默认渲染器可用" class="headerlink" title="脚注(仅默认渲染器可用)"></a>脚注(仅默认渲染器可用)</h4><p>脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注内容演示">[1]</span></a></sup></p><h3 id="善用-HTML"><a href="#善用-HTML" class="headerlink" title="善用 HTML"></a>善用 HTML</h3><p>我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。</p><p>跳转位置演示（跳转位置设置点）</p><h4 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h4><p><span  style="color: #519D9E; ">#519D9E颜色演示</span></p><h4 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h4><p><code>&lt;span  style=&quot;font-size:0.7em;&quot;&gt;0.7em 文字大小演示&lt;/span&gt;</code></p><h4 id="文字位置"><a href="#文字位置" class="headerlink" title="文字位置"></a>文字位置</h4><p style="text-align:center">内容居中演示</p> #可以修改 text-align 参数来设置文字位置。<h4 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h4><p><a href="#demo">点击到达跳转位置演示</a> # 在需要跳转的地方添加此代码。<br><a id="demo">跳转位置演示（跳转位置设置点）</a> # 在跳转位置添加次代码。</p><h4 id="综合演示"><a href="#综合演示" class="headerlink" title="综合演示"></a>综合演示</h4><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">综合演示<br>优雅使用 Fluid写文章</p><h4 id="iframe-页面镶套"><a href="#iframe-页面镶套" class="headerlink" title="iframe 页面镶套"></a>iframe 页面镶套</h4><p>iframe 页面镶套可以帮助我们更好的展示一个页面。比如以下演示页面。</p><iframe src="https://kyriebao.github.io/" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><p>一些参数说明，<code>width=&quot;100%&quot;</code> 为宽度自适应，高度请根据实际需求跳转，<strong>注意移动端页面是否匹配。</strong> <code>scrolling</code> 为滚动条参数。<code>frameborder</code> 为边框参数。<code>noresize</code> 属性规定用户无法调整框架的大小。</p><h4 id="details-标签"><a href="#details-标签" class="headerlink" title="details 标签"></a>details 标签</h4><p>用于展示代码较多需要折叠或折叠相关内容，以下为演示。<code>summary</code> 填写显示名称。</p><details><summary>Demo</summary><p><b>好友申请备注：fluid</b></p><p><b>提问之前请先仔细查阅用户文档</b></p><img width="200" src="https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png" alt="wechat"></details><h3 id="善用-Tag-组件"><a href="#善用-Tag-组件" class="headerlink" title="善用 Tag 组件"></a>善用 Tag 组件</h3><p>Fluid 内置了许多 Tag 组件，包含便签、行内标签、勾选框、按钮和组图，可以使用这些组件来丰富文章内容，具体点击查看官方文档查看，**<a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">点击跳转到 Fluid Doc</a>**。</p><h2 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h2><p>众所周知，<strong>博客好不好看，配图占一半</strong>。这里给大家推荐几个我常用找配图的地方。请尊重相关版权协议。</p><ol><li><h5 id="Wallpaper-Hub"><a href="#Wallpaper-Hub" class="headerlink" title="Wallpaper Hub"></a>Wallpaper Hub</h5><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109111627973.png"></p><p><a href="https://wallhaven.cc/">点击跳转到Wallhaven</a></p><h5 id="Wallhaven"><a href="#Wallhaven" class="headerlink" title="Wallhaven"></a>Wallhaven</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109111607740.png"></h5><p><a href="https://wallhaven.cc/">点击跳转到Wallhaven</a></p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5></li><li><h5 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h5><p><img src="https://gitee.com/kyrie2021/photo/raw/master/img/202109111603050.png"></p></li></ol><p><a href="https://unsplash.com/">点击跳转到Unsplash</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注内容演示<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日菜谱</title>
    <link href="/2021/09/04/%E4%BB%8A%E6%97%A5%E8%8F%9C%E8%B0%B1/"/>
    <url>/2021/09/04/%E4%BB%8A%E6%97%A5%E8%8F%9C%E8%B0%B1/</url>
    
    <content type="html"><![CDATA[<p>1.鱼香肉丝<br>2.油焖茄子<br>3.糖醋里脊</p>]]></content>
    
    
    <categories>
      
      <category>美食</category>
      
    </categories>
    
    
    <tags>
      
      <tag>私房菜</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
